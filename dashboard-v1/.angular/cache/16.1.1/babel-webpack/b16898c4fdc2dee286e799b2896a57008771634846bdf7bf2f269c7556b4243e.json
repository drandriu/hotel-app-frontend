{"ast":null,"code":"import { map } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ServicioService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:8080/servicios';\n  }\n  obtenerServicios(page = 0, size = 5) {\n    return this.http.get(`${this.apiUrl}?page=${page}&size=${size}`);\n  }\n  eliminarServicio(id) {\n    return this.http.delete(`${this.apiUrl}/${id}`);\n  }\n  registrarServicio(servicio) {\n    return this.http.post(this.apiUrl, servicio);\n  }\n  editarServicio(servicio) {\n    return this.http.put(`${this.apiUrl}/${servicio.id}`, servicio);\n  }\n  // Obtener un servicio por su ID usando búsqueda dinámica\n  obtenerServicioPorIdDinamico(id) {\n    const searchRequest = {\n      listSearchCriteria: [{\n        key: 'id',\n        value: String(id),\n        operation: 'equals'\n      }],\n      listOrderCriteria: [{\n        sortBy: 'id',\n        valuesortOrder: \"ASC\"\n      }],\n      page: {\n        pageIndex: 0,\n        pageSize: 1\n      }\n    };\n    return this.http.post(`${this.apiUrl}/search`, searchRequest).pipe(map(response => response.content[0]) // Obtener el primer (y único) resultado\n    );\n  }\n}\n\nServicioService.ɵfac = function ServicioService_Factory(t) {\n  return new (t || ServicioService)(i0.ɵɵinject(i1.HttpClient));\n};\nServicioService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ServicioService,\n  factory: ServicioService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["map","ServicioService","constructor","http","apiUrl","obtenerServicios","page","size","get","eliminarServicio","id","delete","registrarServicio","servicio","post","editarServicio","put","obtenerServicioPorIdDinamico","searchRequest","listSearchCriteria","key","value","String","operation","listOrderCriteria","sortBy","valuesortOrder","pageIndex","pageSize","pipe","response","content","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\usuario\\Desktop\\empresa\\hotel-app-frontend\\dashboard-v1\\src\\app\\services\\servicio.service.ts"],"sourcesContent":["import { HttpClient } from \"@angular/common/http\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { Servicio } from \"../models/servicio.model\";\r\nimport { map, Observable } from \"rxjs\";\r\nimport { DynamicSearchDTO } from \"../models/DynamicSearchDTO\";\r\n\r\nexport interface PaginatedResponse<T> {\r\n    content: T[];\r\n    totalElements: number;\r\n    totalPages: number;\r\n    number: number;\r\n    size: number;\r\n  }\r\n  \r\n  @Injectable({\r\n    providedIn: 'root'\r\n  })\r\n  export class ServicioService {\r\n    private apiUrl = 'http://localhost:8080/servicios';\r\n  \r\n    constructor(private http: HttpClient) {}\r\n  \r\n    obtenerServicios(page: number = 0, size: number = 5): Observable<PaginatedResponse<Servicio>> {\r\n      return this.http.get<PaginatedResponse<Servicio>>(`${this.apiUrl}?page=${page}&size=${size}`);\r\n    }\r\n  \r\n    eliminarServicio(id: number): Observable<void> {\r\n      return this.http.delete<void>(`${this.apiUrl}/${id}`);\r\n    }\r\n  \r\n    registrarServicio(servicio: Servicio): Observable<Servicio> {\r\n      return this.http.post<Servicio>(this.apiUrl, servicio);\r\n    }\r\n  \r\n    editarServicio(servicio: Servicio): Observable<Servicio> {\r\n      return this.http.put<Servicio>(`${this.apiUrl}/${servicio.id}`, servicio);\r\n    }\r\n\r\n// Obtener un servicio por su ID usando búsqueda dinámica\r\n  obtenerServicioPorIdDinamico(id: string): Observable<Servicio> {\r\n    const searchRequest: DynamicSearchDTO = {\r\n      listSearchCriteria: [\r\n        { key: 'id', value: String(id), operation: 'equals' }\r\n      ],\r\n      listOrderCriteria: [\r\n        { sortBy : 'id', valuesortOrder: \"ASC\"}\r\n      ],\r\n      page: {\r\n        pageIndex: 0,\r\n        pageSize: 1\r\n      }\r\n    };\r\n\r\n    return this.http.post<PaginatedResponse<Servicio>>(`${this.apiUrl}/search`, searchRequest).pipe(\r\n      map(response => response.content[0])  // Obtener el primer (y único) resultado\r\n    );\r\n  }\r\n\r\n  }"],"mappings":"AAGA,SAASA,GAAG,QAAoB,MAAM;;;AAcpC,OAAM,MAAOC,eAAe;EAG1BC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,MAAM,GAAG,iCAAiC;EAEX;EAEvCC,gBAAgBA,CAACC,IAAA,GAAe,CAAC,EAAEC,IAAA,GAAe,CAAC;IACjD,OAAO,IAAI,CAACJ,IAAI,CAACK,GAAG,CAA8B,GAAG,IAAI,CAACJ,MAAM,SAASE,IAAI,SAASC,IAAI,EAAE,CAAC;EAC/F;EAEAE,gBAAgBA,CAACC,EAAU;IACzB,OAAO,IAAI,CAACP,IAAI,CAACQ,MAAM,CAAO,GAAG,IAAI,CAACP,MAAM,IAAIM,EAAE,EAAE,CAAC;EACvD;EAEAE,iBAAiBA,CAACC,QAAkB;IAClC,OAAO,IAAI,CAACV,IAAI,CAACW,IAAI,CAAW,IAAI,CAACV,MAAM,EAAES,QAAQ,CAAC;EACxD;EAEAE,cAAcA,CAACF,QAAkB;IAC/B,OAAO,IAAI,CAACV,IAAI,CAACa,GAAG,CAAW,GAAG,IAAI,CAACZ,MAAM,IAAIS,QAAQ,CAACH,EAAE,EAAE,EAAEG,QAAQ,CAAC;EAC3E;EAEJ;EACEI,4BAA4BA,CAACP,EAAU;IACrC,MAAMQ,aAAa,GAAqB;MACtCC,kBAAkB,EAAE,CAClB;QAAEC,GAAG,EAAE,IAAI;QAAEC,KAAK,EAAEC,MAAM,CAACZ,EAAE,CAAC;QAAEa,SAAS,EAAE;MAAQ,CAAE,CACtD;MACDC,iBAAiB,EAAE,CACjB;QAAEC,MAAM,EAAG,IAAI;QAAEC,cAAc,EAAE;MAAK,CAAC,CACxC;MACDpB,IAAI,EAAE;QACJqB,SAAS,EAAE,CAAC;QACZC,QAAQ,EAAE;;KAEb;IAED,OAAO,IAAI,CAACzB,IAAI,CAACW,IAAI,CAA8B,GAAG,IAAI,CAACV,MAAM,SAAS,EAAEc,aAAa,CAAC,CAACW,IAAI,CAC7F7B,GAAG,CAAC8B,QAAQ,IAAIA,QAAQ,CAACC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAE;KACvC;EACH;;;AAvCa9B,eAAe,C;mBAAfA,eAAe,EAAA+B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAflC,eAAe,C;SAAfA,eAAe;EAAAmC,OAAA,EAAfnC,eAAe,CAAAoC,IAAA;EAAAC,UAAA,EAFd;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}