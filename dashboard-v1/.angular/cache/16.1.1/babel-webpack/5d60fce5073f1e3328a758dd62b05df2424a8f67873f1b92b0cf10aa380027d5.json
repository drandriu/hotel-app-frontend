{"ast":null,"code":"import { map } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class HabitacionService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:8080/habitaciones';\n  }\n  obtenerHabitaciones(page = 0, size = 5) {\n    return this.http.get(`${this.apiUrl}?page=${page}&size=${size}`);\n  }\n  // Obtener todas las habitaciones con paginación\n  obtenerHabitacionesConFiltros(page, size) {\n    const url = `${this.apiUrl}?page=${page}&size=${size}`;\n    return this.http.get(url);\n  }\n  eliminarHabitacion(id) {\n    return this.http.delete(`${this.apiUrl}/${id}`);\n  }\n  registrarHabitacion(habitacion) {\n    return this.http.post(this.apiUrl, habitacion);\n  }\n  editarHabitacion(habitacion) {\n    return this.http.put(`${this.apiUrl}/${habitacion.id}`, habitacion);\n  }\n  // Obtener un huésped por su ID usando búsqueda dinámica\n  obtenerHabitacionPorIdDinamico(id) {\n    const searchRequest = {\n      listSearchCriteria: [{\n        key: 'id',\n        value: id,\n        operation: 'equals'\n      }],\n      listOrderCriteria: [],\n      page: {\n        pageIndex: 0,\n        pageSize: 1\n      }\n    };\n    return this.http.post(`${this.apiUrl}/buscar`, searchRequest).pipe(map(response => response.content[0]) // Obtener el primer (y único) resultado\n    );\n  }\n}\n\nHabitacionService.ɵfac = function HabitacionService_Factory(t) {\n  return new (t || HabitacionService)(i0.ɵɵinject(i1.HttpClient));\n};\nHabitacionService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: HabitacionService,\n  factory: HabitacionService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["map","HabitacionService","constructor","http","apiUrl","obtenerHabitaciones","page","size","get","obtenerHabitacionesConFiltros","url","eliminarHabitacion","id","delete","registrarHabitacion","habitacion","post","editarHabitacion","put","obtenerHabitacionPorIdDinamico","searchRequest","listSearchCriteria","key","value","operation","listOrderCriteria","pageIndex","pageSize","pipe","response","content","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\usuario\\Desktop\\empresa\\hotel-app-frontend\\dashboard-v1\\src\\app\\services\\habitacion.service.ts"],"sourcesContent":["import { HttpClient } from \"@angular/common/http\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { map, Observable } from \"rxjs\";\r\nimport { Habitacion } from \"../models/habitacion.model\";\r\nimport { DynamicSearchDTO } from \"../models/DynamicSearchDTO\";\r\n\r\nexport interface PaginatedResponse<T> {\r\n    content: T[];\r\n    totalElements: number;\r\n    totalPages: number;\r\n    number: number;\r\n    size: number;\r\n}\r\n  \r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class HabitacionService {\r\n  private apiUrl = 'http://localhost:8080/habitaciones';\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  obtenerHabitaciones(page: number = 0, size: number = 5): Observable<PaginatedResponse<Habitacion>> {\r\n    return this.http.get<PaginatedResponse<Habitacion>>(`${this.apiUrl}?page=${page}&size=${size}`);\r\n  }\r\n    // Obtener todas las habitaciones con paginación\r\n    obtenerHabitacionesConFiltros(page: number, size: number): Observable<PaginatedResponse<Habitacion>> {\r\n        const url = `${this.apiUrl}?page=${page}&size=${size}`;\r\n        return this.http.get<PaginatedResponse<Habitacion>>(url);\r\n    }\r\n\r\n  eliminarHabitacion(id: number): Observable<void> {\r\n    return this.http.delete<void>(`${this.apiUrl}/${id}`);\r\n  }\r\n\r\n  registrarHabitacion(habitacion: Habitacion): Observable<Habitacion> {\r\n    return this.http.post<Habitacion>(this.apiUrl, habitacion);\r\n  }\r\n\r\n  editarHabitacion(habitacion: Habitacion): Observable<Habitacion> {\r\n    return this.http.put<Habitacion>(`${this.apiUrl}/${habitacion.id}`, habitacion);\r\n  }\r\n  \r\n  // Obtener un huésped por su ID usando búsqueda dinámica\r\n        obtenerHabitacionPorIdDinamico(id: string): Observable<Habitacion> {\r\n          const searchRequest: DynamicSearchDTO = {\r\n            listSearchCriteria: [\r\n              { key: 'id', value: id, operation: 'equals' }\r\n            ],\r\n            listOrderCriteria: [],\r\n            page: {\r\n              pageIndex: 0,\r\n              pageSize: 1\r\n            }\r\n          };\r\n          return this.http.post<PaginatedResponse<Habitacion>>(`${this.apiUrl}/buscar`, searchRequest).pipe(\r\n                map(response => response.content[0])  // Obtener el primer (y único) resultado\r\n              );\r\n        }\r\n\r\n        \r\n        \r\n}"],"mappings":"AAEA,SAASA,GAAG,QAAoB,MAAM;;;AAetC,OAAM,MAAOC,iBAAiB;EAG5BC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,MAAM,GAAG,oCAAoC;EAEd;EAEvCC,mBAAmBA,CAACC,IAAA,GAAe,CAAC,EAAEC,IAAA,GAAe,CAAC;IACpD,OAAO,IAAI,CAACJ,IAAI,CAACK,GAAG,CAAgC,GAAG,IAAI,CAACJ,MAAM,SAASE,IAAI,SAASC,IAAI,EAAE,CAAC;EACjG;EACE;EACAE,6BAA6BA,CAACH,IAAY,EAAEC,IAAY;IACpD,MAAMG,GAAG,GAAG,GAAG,IAAI,CAACN,MAAM,SAASE,IAAI,SAASC,IAAI,EAAE;IACtD,OAAO,IAAI,CAACJ,IAAI,CAACK,GAAG,CAAgCE,GAAG,CAAC;EAC5D;EAEFC,kBAAkBA,CAACC,EAAU;IAC3B,OAAO,IAAI,CAACT,IAAI,CAACU,MAAM,CAAO,GAAG,IAAI,CAACT,MAAM,IAAIQ,EAAE,EAAE,CAAC;EACvD;EAEAE,mBAAmBA,CAACC,UAAsB;IACxC,OAAO,IAAI,CAACZ,IAAI,CAACa,IAAI,CAAa,IAAI,CAACZ,MAAM,EAAEW,UAAU,CAAC;EAC5D;EAEAE,gBAAgBA,CAACF,UAAsB;IACrC,OAAO,IAAI,CAACZ,IAAI,CAACe,GAAG,CAAa,GAAG,IAAI,CAACd,MAAM,IAAIW,UAAU,CAACH,EAAE,EAAE,EAAEG,UAAU,CAAC;EACjF;EAEA;EACMI,8BAA8BA,CAACP,EAAU;IACvC,MAAMQ,aAAa,GAAqB;MACtCC,kBAAkB,EAAE,CAClB;QAAEC,GAAG,EAAE,IAAI;QAAEC,KAAK,EAAEX,EAAE;QAAEY,SAAS,EAAE;MAAQ,CAAE,CAC9C;MACDC,iBAAiB,EAAE,EAAE;MACrBnB,IAAI,EAAE;QACJoB,SAAS,EAAE,CAAC;QACZC,QAAQ,EAAE;;KAEb;IACD,OAAO,IAAI,CAACxB,IAAI,CAACa,IAAI,CAAgC,GAAG,IAAI,CAACZ,MAAM,SAAS,EAAEgB,aAAa,CAAC,CAACQ,IAAI,CAC3F5B,GAAG,CAAC6B,QAAQ,IAAIA,QAAQ,CAACC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAE;KACvC;EACP;;;AAzCK7B,iBAAiB,C;mBAAjBA,iBAAiB,EAAA8B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAjBjC,iBAAiB,C;SAAjBA,iBAAiB;EAAAkC,OAAA,EAAjBlC,iBAAiB,CAAAmC,IAAA;EAAAC,UAAA,EAFhB;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}