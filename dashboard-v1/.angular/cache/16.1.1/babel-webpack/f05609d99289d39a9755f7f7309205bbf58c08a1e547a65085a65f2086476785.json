{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class AuthInterceptor {\n  intercept(req, next) {\n    const token = localStorage.getItem('token'); // Obtiene el token del localStorage\n    console.log(\"-------------------------------\");\n    console.log(\"TOKEN ->\" + token);\n    console.log(\"-------------------------------\");\n    if (token) {\n      // Clonamos la solicitud y agregamos la cabecera Authorization con el token\n      const clonedRequest = req.clone({\n        setHeaders: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      return next.handle(clonedRequest); // Pasamos la solicitud clonada con la cabecera añadida\n    }\n\n    return next.handle(req); // Si no hay token, se pasa la solicitud sin modificar\n  }\n}\n\nAuthInterceptor.ɵfac = function AuthInterceptor_Factory(t) {\n  return new (t || AuthInterceptor)();\n};\nAuthInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthInterceptor,\n  factory: AuthInterceptor.ɵfac\n});","map":{"version":3,"names":["AuthInterceptor","intercept","req","next","token","localStorage","getItem","console","log","clonedRequest","clone","setHeaders","Authorization","handle","factory","ɵfac"],"sources":["C:\\Users\\usuario\\Desktop\\empresa\\hotel-app-frontend\\dashboard-v1\\src\\app\\services\\auth.interceptor.ts"],"sourcesContent":["import { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from \"@angular/common/http\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { Observable } from \"rxjs\";\r\n\r\n@Injectable()\r\nexport class AuthInterceptor implements HttpInterceptor {\r\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n    const token = localStorage.getItem('token');  // Obtiene el token del localStorage\r\n    console.log(\"-------------------------------\");\r\n    console.log(\"TOKEN ->\" + token);\r\n    console.log(\"-------------------------------\");\r\n    if (token) {\r\n      // Clonamos la solicitud y agregamos la cabecera Authorization con el token\r\n      const clonedRequest = req.clone({\r\n        setHeaders: {\r\n          Authorization: `Bearer ${token}`\r\n        }\r\n      });\r\n      return next.handle(clonedRequest);  // Pasamos la solicitud clonada con la cabecera añadida\r\n    }\r\n\r\n    return next.handle(req);  // Si no hay token, se pasa la solicitud sin modificar\r\n  }\r\n}"],"mappings":";AAKA,OAAM,MAAOA,eAAe;EAC1BC,SAASA,CAACC,GAAqB,EAAEC,IAAiB;IAChD,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAE;IAC9CC,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC;IAC9CD,OAAO,CAACC,GAAG,CAAC,UAAU,GAAGJ,KAAK,CAAC;IAC/BG,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC;IAC9C,IAAIJ,KAAK,EAAE;MACT;MACA,MAAMK,aAAa,GAAGP,GAAG,CAACQ,KAAK,CAAC;QAC9BC,UAAU,EAAE;UACVC,aAAa,EAAE,UAAUR,KAAK;;OAEjC,CAAC;MACF,OAAOD,IAAI,CAACU,MAAM,CAACJ,aAAa,CAAC,CAAC,CAAE;;;IAGtC,OAAON,IAAI,CAACU,MAAM,CAACX,GAAG,CAAC,CAAC,CAAE;EAC5B;;;AAjBWF,eAAe,C;mBAAfA,eAAe;AAAA;AAAfA,eAAe,C;SAAfA,eAAe;EAAAc,OAAA,EAAfd,eAAe,CAAAe;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}